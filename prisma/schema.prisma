// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ==============================================
// ENUMS
// ==============================================

enum UserRole {
  PLATFORM_ADMIN
  CLIENT
  CLIENT_MEMBER
  AGENCY_MEMBER
}

enum AgencyMemberFunction {
  DESIGNER
  DEVELOPER
  SALES
  PROJECT_MANAGER
  ACCOUNT_MANAGER
  CREATIVE_DIRECTOR
  TECHNICAL_LEAD
}

enum ContractStatus {
  DRAFT
  PENDING_APPROVAL
  ACTIVE
  COMPLETED
  TERMINATED
  EXPIRED
}

enum OfferStatus {
  DRAFT
  SENT
  ACCEPTED
  DECLINED
  EXPIRED
  WITHDRAWN
}

enum RoomType {
  GENERAL
  CONTRACT_SPECIFIC
  CLIENT_SPECIFIC
  AGENCY_INTERNAL
}

enum ActivityVerb {
  CREATED
  UPDATED
  DELETED
  STATUS_CHANGED
  ASSIGNED
  UNASSIGNED
  MESSAGE_SENT
  FILE_UPLOADED
  FILE_DOWNLOADED
  CONTRACT_SIGNED
  OFFER_ACCEPTED
  OFFER_DECLINED
  TASK_CREATED
  TASK_UPDATED
  TASK_COMPLETED
  TASK_ASSIGNED
  TASK_UNASSIGNED
}

enum PermissionType {
  READ
  WRITE
  ADMIN
  NONE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  CANCELLED
  ON_HOLD
}

// ==============================================
// CORE USER & ORGANIZATION TABLES
// ==============================================

model User {
  id        String   @id @default(uuid())
  authId    String   @unique // Maps to auth.users.id
  email     String   @unique
  firstName String
  lastName  String
  avatar    String?
  role      UserRole
  isActive  Boolean  @default(true)

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  updatedBy String?
  deletedAt DateTime?

  // Relations
  clientMemberships    ClientMembership[]
  agencyMembership     AgencyMembership?
  roomParticipants     RoomParticipant[]
  contractAssignments  ContractAssignment[]
  activities           Activity[]
  messages             Message[]
  createdContracts     Contract[]          @relation("ContractCreator")
  createdOffers        Offer[]             @relation("OfferCreator")
  grantedPermissions   Permission[]        @relation("PermissionGranter")
  permissions          Permission[]
  assignedTasks        Task[]              @relation("TaskAssignee")
  createdTasks         Task[]              @relation("TaskCreator")
  updatedTasks         Task[]              @relation("TaskUpdater")

  @@index([authId])
  @@index([email])
  @@index([role])
  @@index([deletedAt])
  @@map("users")
}

model Client {
  id          String  @id @default(uuid())
  name        String
  description String?
  website     String?
  logo        String?
  isActive    Boolean @default(true)

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  updatedBy String?
  deletedAt DateTime?

  // Relations
  memberships ClientMembership[]
  contracts   Contract[]
  offers      Offer[]
  rooms       Room[]

  @@index([name])
  @@index([deletedAt])
  @@map("clients")
}

model ClientMembership {
  id       String  @id @default(uuid())
  userId   String
  clientId String
  role     String  @default("member") // client-specific role
  isActive Boolean @default(true)

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  updatedBy String?
  deletedAt DateTime?

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([userId, clientId])
  @@index([userId])
  @@index([clientId])
  @@index([deletedAt])
  @@map("client_memberships")
}

model AgencyMembership {
  id       String               @id @default(uuid())
  userId   String               @unique
  function AgencyMemberFunction
  isActive Boolean              @default(true)

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  updatedBy String?
  deletedAt DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([function])
  @@index([deletedAt])
  @@map("agency_memberships")
}

// ==============================================
// CONTRACTS
// ==============================================

model Contract {
  id          String         @id @default(uuid())
  clientId    String
  title       String
  description String?
  status      ContractStatus @default(DRAFT)
  startDate   DateTime?
  endDate     DateTime?
  value       Decimal?       @db.Decimal(10, 2)
  currency    String         @default("USD")
  budget      Decimal?       @db.Decimal(10, 2) // Moved from Project
  
  // Progress tracking fields
  progressPercentage Int     @default(0) // 0-100
  estimatedHours     Int?    // Total estimated hours
  actualHours        Int     @default(0) // Hours actually worked
  priority           Int     @default(3) // 1=High, 2=Medium, 3=Low
  tags               String[] // Contract tags for categorization

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  updatedBy String?
  deletedAt DateTime?

  // Relations
  client       Client                @relation(fields: [clientId], references: [id], onDelete: Cascade)
  creator      User?                 @relation("ContractCreator", fields: [createdBy], references: [id])
  offers       Offer[]               @relation("OfferToContract")
  assignments  ContractAssignment[] 
  tasks        Task[]               
  rooms        Room[]               
  messages     Message[]            
  activities   Activity[]           

  @@index([clientId])
  @@index([status])
  @@index([progressPercentage])
  @@index([priority])
  @@index([deletedAt])
  @@map("contracts")
}

model ContractAssignment {
  id          String  @id @default(uuid())
  contractId  String
  userId      String
  role        String // contract-specific role
  isActive    Boolean @default(true)

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  updatedBy String?
  deletedAt DateTime?

  // Relations
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([contractId, userId])
  @@index([contractId])
  @@index([userId])
  @@index([deletedAt])
  @@map("contract_assignments")
}

// ==============================================
// TASKS
// ==============================================

model Task {
  id          String     @id @default(uuid())
  contractId  String
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    String?    @default("medium") // low, medium, high, urgent
  dueDate     DateTime?
  assignedTo  String?    // User ID who is assigned to this task
  order       Int?       // For task ordering within contract

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  updatedBy String?
  deletedAt DateTime?

  // Relations
  contract  Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  assignee  User?    @relation("TaskAssignee", fields: [assignedTo], references: [id])
  creator   User?    @relation("TaskCreator", fields: [createdBy], references: [id])
  updater   User?    @relation("TaskUpdater", fields: [updatedBy], references: [id])

  @@index([contractId])
  @@index([status])
  @@index([assignedTo])
  @@index([dueDate])
  @@index([order])
  @@index([deletedAt])
  @@map("tasks")
}

// ==============================================
// OFFERS
// ==============================================

model Offer {
  id          String      @id @default(uuid())
  clientId    String
  title       String
  description String?
  status      OfferStatus @default(DRAFT)
  media       Json?       // Array of media files with url, type, etc.
  validUntil  DateTime?
  hasReviewed Boolean     @default(false)

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  updatedBy String?
  deletedAt DateTime?

  // Relations
  client    Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  creator   User?      @relation("OfferCreator", fields: [createdBy], references: [id])
  contracts Contract[] @relation("OfferToContract")

  @@index([clientId])
  @@index([status])
  @@index([validUntil])
  @@index([hasReviewed])
  @@index([deletedAt])
  @@map("offers")
}

// ==============================================
// MESSAGING SYSTEM
// ==============================================

model Room {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        RoomType
  contractId  String? // null for general rooms
  clientId    String? // for client-specific rooms
  isActive    Boolean  @default(true)

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  updatedBy String?
  deletedAt DateTime?

  // Relations
  contract     Contract?          @relation(fields: [contractId], references: [id])
  client       Client?            @relation(fields: [clientId], references: [id])
  participants RoomParticipant[]
  messages     Message[]
  activities   Activity[]

  @@index([type])
  @@index([contractId])
  @@index([clientId])
  @@index([deletedAt])
  @@map("rooms")
}

model RoomParticipant {
  id         String         @id @default(uuid())
  roomId     String
  userId     String
  permission PermissionType @default(READ)
  joinedAt   DateTime       @default(now())
  isActive   Boolean        @default(true)

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  updatedBy String?
  deletedAt DateTime?

  // Relations
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@index([roomId])
  @@index([userId])
  @@index([permission])
  @@index([deletedAt])
  @@map("room_participants")
}

model Message {
  id         String  @id @default(uuid())
  roomId     String
  userId     String
  content    String
  contractId String? // optional contract linkage
  parentId   String? // for replies
  isEdited   Boolean @default(false)

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  updatedBy String?
  deletedAt DateTime?

  // Relations
  room        Room                @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  contract    Contract?           @relation(fields: [contractId], references: [id])
  parent      Message?            @relation("MessageReplies", fields: [parentId], references: [id])
  replies     Message[]           @relation("MessageReplies")
  attachments MessageAttachment[]

  @@index([roomId, createdAt])
  @@index([userId])
  @@index([contractId])
  @@index([parentId])
  @@index([deletedAt])
  @@map("messages")
}

model MessageAttachment {
  id        String @id @default(uuid())
  messageId String
  fileName  String
  filePath  String
  fileSize  Int
  mimeType  String

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  updatedBy String?
  deletedAt DateTime?

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([deletedAt])
  @@map("message_attachments")
}

// ==============================================
// ACTIVITY TRACKING
// ==============================================

model Activity {
  id         String       @id @default(uuid())
  actorId    String // User who performed the action
  verb       ActivityVerb
  targetType String // "contract", "offer", "message", etc.
  targetId   String // ID of the target entity
  metadata   Json? // Additional context data
  contractId String? // Optional contract context
  roomId     String? // Optional room context

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  updatedBy String?
  deletedAt DateTime?

  // Relations
  actor    User      @relation(fields: [actorId], references: [id], onDelete: Cascade)
  contract Contract? @relation(fields: [contractId], references: [id])
  room     Room?     @relation(fields: [roomId], references: [id])

  @@index([actorId])
  @@index([targetType, targetId])
  @@index([contractId])
  @@index([roomId])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("activities")
}

// ==============================================
// PERMISSIONS & ACCESS CONTROL
// ==============================================

model Permission {
  id           String         @id @default(uuid())
  userId       String
  resourceType String // "room", "project", "contract", etc.
  resourceId   String
  permission   PermissionType
  grantedBy    String
  expiresAt    DateTime?

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  updatedBy String?
  deletedAt DateTime?

  // Relations
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  granter User @relation("PermissionGranter", fields: [grantedBy], references: [id])

  @@unique([userId, resourceType, resourceId])
  @@index([userId])
  @@index([resourceType, resourceId])
  @@index([permission])
  @@index([expiresAt])
  @@index([deletedAt])
  @@map("permissions")
}
